/*
 Xinyi He (cs8aware) and Kaixun Zhang(cs8awatp)
 */

/*--------PROGRAM DESCRIPTION----------
This program focuses on changing a given picture's color and showing different visual results.
It uses the method subtractColor to subtract a certain amount from the original red,green,blue components of a picture.
It uses the method complement to create the complement of the given picture.
It uses the method grayscale to convert the colorful picture to a gray picture.
It uses the method myFilter to swap the red,green and blue component of the color every third pixel to make it looks different.
It uses the method extraCreditFilter to enhance the global contrast.
 */

import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  
  /*
   * Subtract the given values from the appropriate colors.
   * Input: rSub - the amount that should be subtracted from pixel’s original red 
   *        gSub - the amount that should be subtracted from pixel’s original green 
   *        bSub - the amount that should be subtracted from pixel’s original blue 
   * Returns: nothing
   */
   public void subtractColor(int rSub, int gSub, int bSub)
     {
       Pixel pixel=null;
       Pixel[] pixelArray=this.getPixels();
       for (int i=0;i<pixelArray.length;i++)//i means the index
       {
         pixel=pixelArray[i];
         int[] color={pixel.getRed()-rSub,pixel.getGreen()-gSub,pixel.getBlue()-bSub};
         //put the values of red,green and blue component in an array called color
         for (int j=0;j<3;j++)//j is the index of array color
         { 
           int testColor=color[j];
           // This checks if the variable testColor is greater than 255. 
           if( testColor > 255) // If it is, set the value to the max value of 255.
           {
             testColor = 255;
           }
           if( testColor < 0) // If it is, set the value to the min value of 0.
           {
             testColor = 0;
           }
           color[j]=testColor;//assign the value of testcolor back to its corresponding array position
         }
         pixel.setColor(new Color(color[0],color[1],color[2]));//set the pixel new color
       }
     }
  
  

  /**
   * Create the complement of each pixel between the provided indices
   * Input: start - the index of the first pixel to be modified (inclusive)
   *        end - the index of the last pixel to be modified (inclusive)
   * Returns: nothing
   */
   public void complement(int start, int end)
   {
     Pixel pixel=null;
     Pixel[] pixelArray=this.getPixels();
     int i=start;//i means the index
     while(i<=end)//the loop starts from the start to the end
     {
       pixel=pixelArray[i];
       int red=pixel.getRed();//get the red,green,blue component
       int green=pixel.getGreen();
       int blue=pixel.getBlue();
       pixel.setColor(new Color(255-red,255-green,255-blue));//create the complement of each pixel
       i++;
     }
   }
   
   
  /*
   * Create the gray equivalent of each pixel between the provided indices
   * Input: start - the index of the first pixel to be modified (inclusive)
   *        end - the index of the last pixel to be modified (inclusive)
   * Returns: nothing
   */
   public void grayscale(int start, int end)
   {
     Pixel pixel=null;
     Pixel[] pixelArray=this.getPixels();
     int i=start;//i means the index
     while(i<=end)//the loop starts from the start to the end
     {
       pixel=pixelArray[i];
       int value=(pixel.getRed()+pixel.getGreen()+pixel.getBlue())/3;//compute the same value of components
       pixel.setColor(new Color(value,value,value));//set pixel the new color
       i++;
     }    
   }
   
  
    
 /**
   * Apply myFilter to each pixel between and including the provided indices
   * myFilter is to swap the three components of color every third pixel:
   * make the red component the same as the original green component
   * make the green component the same as the original blue component
   * make the blue component the same as the original red component
   * Input: start - the index of the first pixel to be modified (inclusive)
   *        end - the index of the last pixel to be modified (inclusive)
   * Returns: nothing
   */
   public void myFilter(int start, int end)
   {
     Pixel[] pixelArray=this.getPixels();
     Pixel pixel=null;
     int i=start;//i means the index
     while(i<=end)//the loop starts from the start to the end
     {
       pixel=pixelArray[i];
       int red=pixel.getRed();//get the red,green,blue component
       int green=pixel.getGreen();
       int blue=pixel.getBlue();
       pixel.setColor(new Color(green,blue,red));//swap the red,green and blue components
       i+=3;
     }   
   }
   
   
/**
   * extraCreditFilter
   * Apply extraCreditFilter to each pixel to enhance the global contrast
   * Input: an interger which represents the contrast 
   * Returns: nothing
   */
   public void extraCreditFilter(int n)
   {
     Pixel[] pixelArray=this.getPixels();
     Pixel pixel=null;
     for (int i=0;i<pixelArray.length;i++)
     {
       pixel=pixelArray[i];
       int red=pixel.getRed();//get the red,green,blue component
       int green=pixel.getGreen();
       int blue=pixel.getBlue();
       
       if (red<n)// if red component is smaller than the input,make red=0
       {
         red=0;
       }
       else if (red>255-n) //if red component is larger than the input,make red=255
            {
              red=255;
            }
            else //otherwise,make red=(int) ((red-n)*255/(255-2*n))
            { 
              red=(int) ((red-n)*255/(255-2*n));
            }
       
       if (green<n)//similar to the above
       {
         green=0;
       }
       else if (green>255-n)
            {
               green=255;
             } 
             else 
             {
               green=(int) ((green-n)*255/(255-2*n));
             }
           
       if (blue<n)
       {
         blue=0;
       }
       else if (blue>255-n)
            {
               blue=255;
            } 
            else 
            {
               blue=(int) ((blue-n)*255/(255-2*n));
            }  
       
       pixel.setColor(new Color(red,green,blue));//set pixel new color
     }   
   }
   
     
  
} // this } is the end of class Picture, put all new methods before this
 
